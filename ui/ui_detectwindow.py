# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'detectwindow.ui'
##
## Created by: Qt User Interface Compiler version 6.5.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QDockWidget, QLayout, QMainWindow,
    QMenu, QMenuBar, QSizePolicy, QStatusBar,
    QToolBar, QVBoxLayout, QWidget)
import rc_img

class Ui_detectWindow(object):
    def setupUi(self, detectWindow):
        if not detectWindow.objectName():
            detectWindow.setObjectName(u"detectWindow")
        detectWindow.setWindowModality(Qt.NonModal)
        detectWindow.setEnabled(True)
        detectWindow.resize(948, 638)
        font = QFont()
        font.setPointSize(9)
        detectWindow.setFont(font)
        icon = QIcon()
        icon.addFile(u":/resource/10125_icons/shell32_35.ico", QSize(), QIcon.Normal, QIcon.Off)
        detectWindow.setWindowIcon(icon)
        detectWindow.setAutoFillBackground(True)
        detectWindow.setInputMethodHints(Qt.ImhNone)
        detectWindow.setIconSize(QSize(30, 30))
        self.actionNew_Window = QAction(detectWindow)
        self.actionNew_Window.setObjectName(u"actionNew_Window")
        icon1 = QIcon()
        icon1.addFile(u":/resource/mine/newwindow.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionNew_Window.setIcon(icon1)
        self.actionNew_Window.setShortcutContext(Qt.WindowShortcut)
        self.actionNew_Window.setVisible(True)
        self.actionOpen_File = QAction(detectWindow)
        self.actionOpen_File.setObjectName(u"actionOpen_File")
        icon2 = QIcon()
        icon2.addFile(u":/resource/mine/openfile.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOpen_File.setIcon(icon2)
        self.actionSave = QAction(detectWindow)
        self.actionSave.setObjectName(u"actionSave")
        icon3 = QIcon()
        icon3.addFile(u":/resource/mine/save.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave.setIcon(icon3)
        self.actionSave_As = QAction(detectWindow)
        self.actionSave_As.setObjectName(u"actionSave_As")
        icon4 = QIcon()
        icon4.addFile(u":/resource/mine/saveas.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave_As.setIcon(icon4)
        self.actionPrint = QAction(detectWindow)
        self.actionPrint.setObjectName(u"actionPrint")
        icon5 = QIcon()
        icon5.addFile(u":/resource/mine/print.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPrint.setIcon(icon5)
        self.actionPrint_Preview = QAction(detectWindow)
        self.actionPrint_Preview.setObjectName(u"actionPrint_Preview")
        icon6 = QIcon()
        iconThemeName = u"document-print-preview"
        if QIcon.hasThemeIcon(iconThemeName):
            icon6 = QIcon.fromTheme(iconThemeName)
        else:
            icon6.addFile(u".", QSize(), QIcon.Normal, QIcon.Off)

        self.actionPrint_Preview.setIcon(icon6)
        self.actionExit = QAction(detectWindow)
        self.actionExit.setObjectName(u"actionExit")
        icon7 = QIcon()
        iconThemeName = u"window-close"
        if QIcon.hasThemeIcon(iconThemeName):
            icon7 = QIcon.fromTheme(iconThemeName)
        else:
            icon7.addFile(u".", QSize(), QIcon.Normal, QIcon.Off)

        self.actionExit.setIcon(icon7)
        self.actionUndo = QAction(detectWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        icon8 = QIcon()
        icon8.addFile(u":/resource/10125_icons/imageres_5315.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionUndo.setIcon(icon8)
        self.actionRedo = QAction(detectWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        icon9 = QIcon()
        icon9.addFile(u":/resource/10125_icons/imageres_5311.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRedo.setIcon(icon9)
        self.actionCut = QAction(detectWindow)
        self.actionCut.setObjectName(u"actionCut")
        icon10 = QIcon()
        icon10.addFile(u":/resource/10125_icons/shell32_16762.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCut.setIcon(icon10)
        self.actionCopy = QAction(detectWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        icon11 = QIcon()
        icon11.addFile(u":/resource/10125_icons/shell32_243.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCopy.setIcon(icon11)
        self.actionPaste = QAction(detectWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        icon12 = QIcon()
        icon12.addFile(u":/resource/10125_icons/shell32_16763.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPaste.setIcon(icon12)
        self.actionRemove = QAction(detectWindow)
        self.actionRemove.setObjectName(u"actionRemove")
        self.actionDelete = QAction(detectWindow)
        self.actionDelete.setObjectName(u"actionDelete")
        icon13 = QIcon()
        icon13.addFile(u":/resource/mine/delete.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDelete.setIcon(icon13)
        self.actionAdvanced = QAction(detectWindow)
        self.actionAdvanced.setObjectName(u"actionAdvanced")
        self.actionFind_Replace = QAction(detectWindow)
        self.actionFind_Replace.setObjectName(u"actionFind_Replace")
        icon14 = QIcon()
        iconThemeName = u"edit-find-replace"
        if QIcon.hasThemeIcon(iconThemeName):
            icon14 = QIcon.fromTheme(iconThemeName)
        else:
            icon14.addFile(u".", QSize(), QIcon.Normal, QIcon.Off)

        self.actionFind_Replace.setIcon(icon14)
        self.actionPreferences = QAction(detectWindow)
        self.actionPreferences.setObjectName(u"actionPreferences")
        self.actionAbout_Qt_Creator = QAction(detectWindow)
        self.actionAbout_Qt_Creator.setObjectName(u"actionAbout_Qt_Creator")
        self.actionRefresh = QAction(detectWindow)
        self.actionRefresh.setObjectName(u"actionRefresh")
        icon15 = QIcon()
        icon15.addFile(u":/resource/mine/refresh.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRefresh.setIcon(icon15)
        self.actionFullscreen = QAction(detectWindow)
        self.actionFullscreen.setObjectName(u"actionFullscreen")
        icon16 = QIcon()
        icon16.addFile(u":/resource/mine/fullscreen.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFullscreen.setIcon(icon16)
        self.actionRestore = QAction(detectWindow)
        self.actionRestore.setObjectName(u"actionRestore")
        icon17 = QIcon()
        icon17.addFile(u":/resource/mine/restore.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRestore.setIcon(icon17)
        self.actionZoom_In = QAction(detectWindow)
        self.actionZoom_In.setObjectName(u"actionZoom_In")
        icon18 = QIcon()
        icon18.addFile(u":/resource/mine/zoomin.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoom_In.setIcon(icon18)
        self.actionZoom_Out = QAction(detectWindow)
        self.actionZoom_Out.setObjectName(u"actionZoom_Out")
        icon19 = QIcon()
        icon19.addFile(u":/resource/mine/zoomout.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoom_Out.setIcon(icon19)
        self.actionZoom_Original = QAction(detectWindow)
        self.actionZoom_Original.setObjectName(u"actionZoom_Original")
        self.actionZoom_Fit_Best = QAction(detectWindow)
        self.actionZoom_Fit_Best.setObjectName(u"actionZoom_Fit_Best")
        icon20 = QIcon()
        iconThemeName = u"zoom-fit-best"
        if QIcon.hasThemeIcon(iconThemeName):
            icon20 = QIcon.fromTheme(iconThemeName)
        else:
            icon20.addFile(u".", QSize(), QIcon.Normal, QIcon.Off)

        self.actionZoom_Fit_Best.setIcon(icon20)
        self.actionGoNext = QAction(detectWindow)
        self.actionGoNext.setObjectName(u"actionGoNext")
        icon21 = QIcon()
        icon21.addFile(u":/resource/mine/gonext.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGoNext.setIcon(icon21)
        self.actionGoPrevious = QAction(detectWindow)
        self.actionGoPrevious.setObjectName(u"actionGoPrevious")
        icon22 = QIcon()
        icon22.addFile(u":/resource/mine/goprevious.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGoPrevious.setIcon(icon22)
        self.actionExport_Pdf = QAction(detectWindow)
        self.actionExport_Pdf.setObjectName(u"actionExport_Pdf")
        icon23 = QIcon()
        icon23.addFile(u":/resource/mine/exportpdf.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExport_Pdf.setIcon(icon23)
        self.centralwidget = QWidget(detectWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.mainwindowVLayout = QVBoxLayout()
        self.mainwindowVLayout.setObjectName(u"mainwindowVLayout")
        self.mainwindowVLayout.setSizeConstraint(QLayout.SetNoConstraint)

        self.verticalLayout.addLayout(self.mainwindowVLayout)

        detectWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(detectWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 948, 17))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuTools = QMenu(self.menubar)
        self.menuTools.setObjectName(u"menuTools")
        self.menuWindow = QMenu(self.menubar)
        self.menuWindow.setObjectName(u"menuWindow")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        detectWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(detectWindow)
        self.statusbar.setObjectName(u"statusbar")
        detectWindow.setStatusBar(self.statusbar)
        self.menuToolBar = QToolBar(detectWindow)
        self.menuToolBar.setObjectName(u"menuToolBar")
        self.menuToolBar.setEnabled(True)
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menuToolBar.sizePolicy().hasHeightForWidth())
        self.menuToolBar.setSizePolicy(sizePolicy)
        self.menuToolBar.setCursor(QCursor(Qt.ArrowCursor))
        self.menuToolBar.setMouseTracking(False)
        self.menuToolBar.setAutoFillBackground(False)
        self.menuToolBar.setIconSize(QSize(30, 30))
        self.menuToolBar.setFloatable(True)
        detectWindow.addToolBar(Qt.TopToolBarArea, self.menuToolBar)
        self.dockWidget = QDockWidget(detectWindow)
        self.dockWidget.setObjectName(u"dockWidget")
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.dockWidget.setWidget(self.dockWidgetContents)
        detectWindow.addDockWidget(Qt.LeftDockWidgetArea, self.dockWidget)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuWindow.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew_Window)
        self.menuFile.addAction(self.actionOpen_File)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addAction(self.actionPrint_Preview)
        self.menuFile.addAction(self.actionExport_Pdf)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionRemove)
        self.menuEdit.addAction(self.actionDelete)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionAdvanced)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFind_Replace)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionPreferences)
        self.menuView.addAction(self.actionRefresh)
        self.menuView.addAction(self.actionFullscreen)
        self.menuView.addAction(self.actionRestore)
        self.menuView.addAction(self.actionZoom_In)
        self.menuView.addAction(self.actionZoom_Out)
        self.menuView.addAction(self.actionZoom_Original)
        self.menuView.addAction(self.actionZoom_Fit_Best)
        self.menuHelp.addAction(self.actionAbout_Qt_Creator)
        self.menuToolBar.addAction(self.actionNew_Window)
        self.menuToolBar.addAction(self.actionOpen_File)
        self.menuToolBar.addAction(self.actionSave)
        self.menuToolBar.addAction(self.actionSave_As)
        self.menuToolBar.addAction(self.actionPrint)
        self.menuToolBar.addAction(self.actionExport_Pdf)
        self.menuToolBar.addSeparator()
        self.menuToolBar.addAction(self.actionUndo)
        self.menuToolBar.addAction(self.actionRedo)
        self.menuToolBar.addAction(self.actionCut)
        self.menuToolBar.addAction(self.actionCopy)
        self.menuToolBar.addAction(self.actionPaste)
        self.menuToolBar.addAction(self.actionDelete)
        self.menuToolBar.addSeparator()
        self.menuToolBar.addAction(self.actionRefresh)
        self.menuToolBar.addAction(self.actionFullscreen)
        self.menuToolBar.addAction(self.actionRestore)
        self.menuToolBar.addAction(self.actionZoom_In)
        self.menuToolBar.addAction(self.actionZoom_Out)
        self.menuToolBar.addAction(self.actionZoom_Fit_Best)
        self.menuToolBar.addSeparator()

        self.retranslateUi(detectWindow)

        QMetaObject.connectSlotsByName(detectWindow)
    # setupUi

    def retranslateUi(self, detectWindow):
        detectWindow.setWindowTitle(QCoreApplication.translate("detectWindow", u"HT-Detector", None))
        self.actionNew_Window.setText(QCoreApplication.translate("detectWindow", u"New Window", None))
#if QT_CONFIG(shortcut)
        self.actionNew_Window.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen_File.setText(QCoreApplication.translate("detectWindow", u"Open File", None))
#if QT_CONFIG(shortcut)
        self.actionOpen_File.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("detectWindow", u"Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_As.setText(QCoreApplication.translate("detectWindow", u"Save As..", None))
        self.actionPrint.setText(QCoreApplication.translate("detectWindow", u"Print", None))
#if QT_CONFIG(shortcut)
        self.actionPrint.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionPrint_Preview.setText(QCoreApplication.translate("detectWindow", u"Print Preview", None))
        self.actionExit.setText(QCoreApplication.translate("detectWindow", u"Exit", None))
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("detectWindow", u"Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("detectWindow", u"Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+Y", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("detectWindow", u"Cut", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("detectWindow", u"Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("detectWindow", u"Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionRemove.setText(QCoreApplication.translate("detectWindow", u"Remove", None))
#if QT_CONFIG(shortcut)
        self.actionRemove.setShortcut(QCoreApplication.translate("detectWindow", u"Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionDelete.setText(QCoreApplication.translate("detectWindow", u"Delete", None))
#if QT_CONFIG(shortcut)
        self.actionDelete.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionAdvanced.setText(QCoreApplication.translate("detectWindow", u"Advanced", None))
        self.actionFind_Replace.setText(QCoreApplication.translate("detectWindow", u"Find/Replace", None))
        self.actionPreferences.setText(QCoreApplication.translate("detectWindow", u"Preferences", None))
        self.actionAbout_Qt_Creator.setText(QCoreApplication.translate("detectWindow", u"About Qt Creator...", None))
        self.actionRefresh.setText(QCoreApplication.translate("detectWindow", u"Refresh", None))
#if QT_CONFIG(shortcut)
        self.actionRefresh.setShortcut(QCoreApplication.translate("detectWindow", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionFullscreen.setText(QCoreApplication.translate("detectWindow", u"Fullscreen", None))
        self.actionRestore.setText(QCoreApplication.translate("detectWindow", u"Restore", None))
        self.actionZoom_In.setText(QCoreApplication.translate("detectWindow", u"Zoom In", None))
        self.actionZoom_Out.setText(QCoreApplication.translate("detectWindow", u"Zoom Out", None))
        self.actionZoom_Original.setText(QCoreApplication.translate("detectWindow", u"Zoom Original", None))
        self.actionZoom_Fit_Best.setText(QCoreApplication.translate("detectWindow", u"Zoom Fit Best", None))
        self.actionGoNext.setText(QCoreApplication.translate("detectWindow", u"GoNext", None))
        self.actionGoPrevious.setText(QCoreApplication.translate("detectWindow", u"GoPrevious", None))
        self.actionExport_Pdf.setText(QCoreApplication.translate("detectWindow", u"Export Pdf", None))
        self.menuFile.setTitle(QCoreApplication.translate("detectWindow", u"File", None))
        self.menuEdit.setTitle(QCoreApplication.translate("detectWindow", u"Edit", None))
        self.menuView.setTitle(QCoreApplication.translate("detectWindow", u"View", None))
        self.menuTools.setTitle(QCoreApplication.translate("detectWindow", u"Tools", None))
        self.menuWindow.setTitle(QCoreApplication.translate("detectWindow", u"Window", None))
        self.menuHelp.setTitle(QCoreApplication.translate("detectWindow", u"Help", None))
        self.menuToolBar.setWindowTitle(QCoreApplication.translate("detectWindow", u"toolBar", None))
    # retranslateUi

